# -*- coding: utf-8 -*-
"""Copy of  PHASE3df_FINAL.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1afwKw0uVaNuki_ATy6VLl6xhuMFKMVfK
"""

#======================initial_values===========
arr="01011111111111111010111110100011"
Reg=[0,0,2147483632,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
p=0
print("INITIAL REGISTER FILE: ")
print(Reg)
PC=0
IR="NULL"
clock=0
knob1=1
knob2=0
knob3=0
knob4=0
knob5=0
stmt=0
n=0
count=0
jump=0
nofcontrol_ins=0
nof_stalls1=0 
nof_stalls2=0 
nofmis_predic=0
nof_conhaz=0
#registers
RB=12
RY=0
RA=0
RZ=0
InA=0
InB=0
RM=0
#variables
f1=0
d1=0
e1=0
m1=0
mw1=0
rs1=0
rs2=0
rz=0
rd=0
subArr=0
ry=0
data={}
st=0
#buffers
B1=[]
B2=[]
B3=[]
B4=[]
pl=["n","n","n","n"]

fe=0
de=0
ex=0
me=0
mw=0

#controls
B_SEL=0
Y_SEL=[0,0,0]
ALU_op=[0,0,0,0,0]


#intermediate variables
imm=57
return_addr=85775








def twos_comp(val, bits):
    
    if ((val and (1 << (bits - 1))) != 0): # if sign bit is set e.g., 8bit: 128-255
        val = val - (1 << bits)        # compute negative value
    return val
#=====================fetch==================
def fetch(pc,list):
  return list[int(pc)]
#==========================DECODE===================

def decode_op1(arr,Reg):
    global RA,RB
    global B_SEL,rd,imm,ALU_op,Y_SEL,return_addr
    subArr=arr[25:] 
    fun3=arr[17:20]
    fun7=arr[0:7]
    if(subArr=="0110011"):                #R
      B_SEL=0
      Y_SEL[0]=0
      Y_SEL[1]=0
      Y_SEL[2]=0
      ops={"000":"00001","001":"00100","010":"00101","100":"01001","101":"00111","101":"00110","110":"00011","111":"00010"}
      

      if(fun7=="0100000"):
        if(fun3=="000"):	
          ALU_op="01000" 
          rd=int(str(arr[20:25]),2)
          rs1=int(str(arr[12:17]),2)
          rs2=int(str(arr[7:12]),2)
          RA=Reg[rs1]
          RB=Reg[rs2]
          B_SEL=0
          A_sel=0
          InA=RA
          imm=0
	

      if(fun3=="101"):					#edited
          ALU_op="00110"	  
          rd=int(str(arr[20:25]),2)
          rs1=int(str(arr[12:17]),2)
          rs2=int(str(arr[7:12]),2)
          RA=Reg[rs1]
          RB=Reg[rs2]
          B_SEL=0
          A_sel=0
          InA=RA
          imm=0
	  



      elif(fun7=="0000001"):
        if(fun3=="000"):         #mul
          ALU_op="01010"
          rd=int(str(arr[20:25]),2)
          rs1=int(str(arr[12:17]),2)
          rs2=int(str(arr[7:12]),2)
          RA=Reg[rs1]
          RB=Reg[rs2]
          B_SEL=0
          A_sel=0
          InA=RA
          imm=0
        elif(fun3=="100"):        #div
          ALU_op="01011"
          rd=int(str(arr[20:25]),2)
          rs1=int(str(arr[12:17]),2)
          rs2=int(str(arr[7:12]),2)
          RA=Reg[rs1]
          RB=Reg[rs2]
          B_SEL=0
          A_sel=0
          InA=RA
          imm=0
        elif(fun3=="110"):        #rem
          ALU_op="01100"
          rd=int(str(arr[20:25]),2)
          rs1=int(str(arr[12:17]),2)
          rs2=int(str(arr[7:12]),2)
          RA=Reg[rs1]
          RB=Reg[rs2]
          B_SEL=0
          A_sel=0
          InA=RA
          imm=0
      else:
        ALU_op=ops.get(fun3)
        rd=int(str(arr[20:25]),2)
        rs1=int(str(arr[12:17]),2)
        rs2=int(str(arr[7:12]),2)
        RA=Reg[rs1]
        RB=Reg[rs2]
        B_SEL=0
        A_sel=0
        InA=RA
        imm=0
      


    elif(subArr=="0000011"):   #I
      B_SEL=1
      Y_SEL[0]=0
      Y_SEL[1]=0
      Y_SEL[2]=1             
      ops={"000":"10000" ,"001":"10010","010":"10011","011":"10001"}
      ALU_op=ops.get(fun3)
      if(arr[0]=='1'):
	      binary_string = str(arr[0:12])
	      imm = twos_comp(int(binary_string,2), len(binary_string))
      else:
	      imm=int(str(arr[0:12]),2)
      rs1=int(str(arr[12:17]),2)
      rd=int(str(arr[20:25]),2)
      RA=Reg[rs1]
      B_SEL=1
      A_sel=0
      InA=RA

    elif(subArr=="0010011"):                 #I
      B_SEL=1
      Y_SEL[0]=0
      Y_SEL[1]=0
      Y_SEL[2]=1
      ops={"000":"01101" ,"110":"01111","111":"01110"}
      ALU_op=ops.get(fun3)
      if(arr[0]=='1'):
	      binary_string = str(arr[0:12])
	      imm = twos_comp(int(binary_string,2), len(binary_string))
      else:
        imm=int(str(arr[0:12]),2)
      rs1=int(str(arr[12:17]),2)
      rd=int(str(arr[20:25]),2)
      RA=Reg[rs1]
      B_SEL=1
      A_sel=0
      InA=RA

    elif(subArr=="1100111"):                 #I #jalr
      B_SEL=1
      Y_SEL[0]=0
      Y_SEL[1]=0
      Y_SEL[2]=1
      ALU_op="10100"
      if(arr[0]=='1'):
	      binary_string = str(arr[0:12])
	      imm = twos_comp(int(binary_string,2), len(binary_string))
      else:
        imm=int(str(arr[0:12]),2)
      rs1=int(str(arr[12:17]),2)
      rd=int(str(arr[20:25]),2)
      RA=Reg[rs1]
      B_SEL=1
      A_sel=0
      InA=RA
       
  

    elif(subArr=="0010111"):                 #auipc
      B_SEL=1
      Y_SEL[0]=0
      Y_SEL[1]=1
      Y_SEL[2]=0
      ALU_op="11101"
      rd=int(str(arr[20:25]),2)
      imm=int(str(arr[0:20])+"000000000000",2)
    
      RA=0
      RB=0
      A_sel=1
      InA=RA
                                                                #check
    
    elif(subArr=="0110111"):                  #lui
      B_SEL=1
      Y_SEL[0]=0
      Y_SEL[1]=1
      Y_SEL[2]=1
      ALU_op="11110"
            
      rd=int(str(arr[20:25]),2)
      imm=int(str(arr[0:20])+"000000000000",2)
      RA=0
      RB=0
      B_SEL=1
      A_sel=0
      InA=RA

    elif(subArr=="1101111"):                 #UJ
      B_SEL=0
      Y_SEL[0]=1
      Y_SEL[1]=0
      Y_SEL[2]=0
      ALU_op="11111"
      rd=int(str(arr[20:25]),2)

    
      
      #imm=int(str(arr[0])+str(arr[12:20])+str(arr[11])+str(arr[1:11]))+"0",2)
      binary_string = str((arr[0])+str(arr[12:20])+str(arr[11])+str(arr[1:11])+"0")
      if(arr[0]=='1'):
	      imm = twos_comp(int(binary_string,2), len(binary_string))
      else:
        imm=int(binary_string,2)
      RA=0
      RB=0
      B_SEL=0
      A_sel=0
      InA=RA


    elif(subArr=="0100011"):                 #S         #fun3 for sd 011 
      B_SEL=1
      Y_SEL[0]=1
      Y_SEL[1]=0
      Y_SEL[2]=1
      ops={"000":"10101" ,"001":"10111","010":"11000","011":"10110"}
      ALU_op=ops.get(fun3)
      rd=0
      rs1=int(str(arr[12:17]),2)
      rs2=int(str(arr[7:12]),2)
      imm=int(str(arr[0:7])+str(arr[20:25]),2)
      RA=Reg[rs1]
      RB=Reg[rs2]
      B_SEL=1
      A_sel=0
      InA=RA



    elif(subArr=="1100011"):                 #SB
      B_SEL=0
      Y_SEL[0]=1
      Y_SEL[1]=1
      Y_SEL[2]=0
      ops={"000":"11001" ,"001":"11010","100":"11100","101":"11011"}
      ALU_op=ops.get(fun3)
      rd=0
      rs1=int(str(arr[12:17]),2)
      rs2=int(str(arr[7:12]),2)
      imm=int(str(arr[0])+str(arr[24])+str(arr[1:7])+str(arr[20:24])+"0",2)
      RA=Reg[rs1]
      RB=Reg[rs2]
      A_sel=0                                   #check
      InA=RA

    InA=RA

    



    
    
    return InA,B_SEL,RB,rd,imm,return_addr,ALU_op,subArr,fun3,Y_SEL

#==========EXECUTE================

def execute1(op,ra,rb,PC,RB):
  global RM,rz
  RM=0
  if (op == "00001"):  #add                           
      rz= ra+rb
      print("RZ CHANGED TO: "+str(RZ))
     
  elif (op == "00010"):  #and            
      rz= ra&rb
      print("RZ CHANGED TO: "+str(RZ))
  elif (op == "00011"): #or
      rz= ra|rb
      print("RZ CHANGED TO: "+str(RZ))
  elif (op == "00100"): #sll
      rz= ra<<rb
      print("RZ CHANGED TO: "+str(RZ))
  elif (op == "00101"): #slt
     if(ra<rb):
       rz= 1
       print("RZ CHANGED TO: "+str(RZ))
     else:
       rz= 0
       print("RZ CHANGED TO: "+str(RZ))
  elif (op == "00110"): #sra
     rc=ra>>31
     rd=1<<31
     if(rc==1):
       for i in range(int(str(rb),2)):
         ra=ra>>1
         ra=ra+rd
       rz=ra
       print("RZ CHANGED TO: "+str(RZ))
     else:
       rz= ra>>rb                 #just
       print("RZ CHANGED TO: "+str(RZ))
      
  elif (op == "00111"): #srl
      rz= ra>>rb
      print("RZ CHANGED TO: "+str(RZ))
  elif (op == "01000"): #sub
      rz= ra-rb     
      print("RZ CHANGED TO: "+str(RZ))    
  elif (op == "01001"): #xor
      rz= ra^rb     
      print("RZ CHANGED TO: "+str(RZ))       
  elif (op == "01010"): #mul
      rz= ra*rb       
      print("RZ CHANGED TO: "+str(RZ))    
  elif (op == "01011"):  #div    
      rz= ra/rb      
      print("RZ CHANGED TO: "+str(RZ))
  elif (op == "01100"): #rem
      rz= ra%rb            
      print("RZ CHANGED TO: "+str(RZ))
  elif (op == "01101"): #addi
      
   
      rz= ra+rb
      print("RZ CHANGED TO: "+str(RZ))
  elif (op == "01110"): #andi
      rz= ra&rb
      print("RZ CHANGED TO: "+str(RZ))
  elif (op == "01111"): #ori
      rz= ra|rb
      print("RZ CHANGED TO: "+str(RZ))
  elif (op == "10000"): # lb
      RM =RB
      print("RM CHANGED TO: "+str(RM))
      rz= ra+rb
  elif (op == "10001"): #ld
      RM =RB
      print("RM CHANGED TO: "+str(RM))
      rz= ra+rb
  elif (op == "10010"): #lh
      RM = RB
      print("RM CHANGED TO: "+str(RM))
      rz= ra+rb
  elif (op == "10011"): #lw
      RM = RB
      print("RM CHANGED TO: "+str(RM))
      rz= ra+rb
  elif (op == "10100"): #jalr
      PC=ra+rb
      print("PC CHANGED TO: "+str(PC))	      
  elif (op == "10101"): #sb
      RM = RB
      print("RM CHANGED TO: "+str(RM))
      rz=ra+rb
  elif (op == "10110"): #sd
      RM = RB
      print("RM CHANGED TO: "+str(RM))
      rz= ra+rb
  elif (op == "10111"): #sh
      RM = RB
      print("RM CHANGED TO: "+str(RM))
      rz= ra+rb
  elif (op == "11000"): #sw
      RM = RB
      print("RM CHANGED TO: "+str(RM))
      rz= ra+rb
  elif (op == "11001"):#beq
      
      if(ra==rb):
        PC=PC+imm-4
        print("PC CHANGED TO: "+str(PC))	
        rz= ra+rb
        
      else:
        
        rz= ra+rb
                                
  elif (op == "11010"):#bne
      if(ra!=rb):
        PC=PC+imm-4
        print("PC CHANGED TO: "+str(PC))	
        rz= ra+rb
        
      else:
        rz= ra+rb
  elif (op == "11011"):#bge
      if(ra>=rb):
        PC=PC+imm-4
        print("PC CHANGED TO: "+str(PC))	
        rz= ra+rb
        
      else:
        rz= ra+rb
  elif (op == "11100"):#blt
      if(ra<rb):
        PC=PC+imm-4
        print("PC CHANGED TO: "+str(PC))	
        rz= ra+rb
        
      else:
        rz= ra+rb
  elif (op == "11101"):#auipc
        rz= rb+PC-4
  elif (op == "11110"):#lui
      rz= ra+rb
  elif (op == "11111"):#jal
      rz=ra+rb
      PC=PC+imm-4
      print("PC CHANGED TO: "+str(PC))	
     
      
      
  return rz,RM,PC
#==========================DECODE===================

def decode_op(arr,Reg):
    global RA,RB
    global B_SEL,rd,imm,ALU_op,return_addr
    subArr=arr[25:] 
    fun3=arr[17:20]
    fun7=arr[0:7]
    if(subArr=="0110011"):                #R
      B_SEL=0
      Y_SEL0=0
      Y_SEL1=0
      Y_SEL2=0
      ops={"000":"00001","001":"00100","010":"00101","100":"01001","101":"00111","101": "00110","110":"00011","111":"00010"}
      

      if(fun7=="0100000"):
        if(fun3=="000"):        
          ALU_op="01000"
          
          rd=int(str(arr[20:25]),2)
          rs1=int(str(arr[12:17]),2)
          rs2=int(str(arr[7:12]),2)
          RA=Reg[rs1]
          RB=Reg[rs2]
          B_SEL=0
          A_sel=0
          InA=RA
          imm=0
          res=-1

        if(fun3=="101"):                                        #edited
          ALU_op="00110"
          
          rd=int(str(arr[20:25]),2)
          rs1=int(str(arr[12:17]),2)
          rs2=int(str(arr[7:12]),2)
          RA=Reg[rs1]
          RB=Reg[rs2]
          B_SEL=0
          A_sel=0
          InA=RA
          imm=0
          res=-1



      elif(fun7=="0000001"):
        if(fun3=="000"):         #mul
          ALU_op="01010"
          rd=int(str(arr[20:25]),2)
          rs1=int(str(arr[12:17]),2)
          rs2=int(str(arr[7:12]),2)
          RA=Reg[rs1]
          RB=Reg[rs2]
          B_SEL=0
          A_sel=0
          InA=RA
          imm=0
          res=-1
        elif(fun3=="100"):        #div
          ALU_op="01011"
          rd=int(str(arr[20:25]),2)
          rs1=int(str(arr[12:17]),2)
          rs2=int(str(arr[7:12]),2)
          RA=Reg[rs1]
          RB=Reg[rs2]
          B_SEL=0
          A_sel=0
          InA=RA
          imm=0
          res=-1
        elif(fun3=="110"):        #rem
          ALU_op="01100"
          rd=int(str(arr[20:25]),2)
          rs1=int(str(arr[12:17]),2)
          rs2=int(str(arr[7:12]),2)
          RA=Reg[rs1]
          RB=Reg[rs2]
          B_SEL=0
          A_sel=0
          InA=RA
          imm=0
          res=-1
      else:
        ALU_op=ops.get(fun3)
        rd=int(str(arr[20:25]),2)
        rs1=int(str(arr[12:17]),2)
        rs2=int(str(arr[7:12]),2)
        RA=Reg[rs1]
        RB=Reg[rs2]
        B_SEL=0
        A_sel=0
        InA=RA
        imm=0
        res=-1
      


    elif(subArr=="0000011"):   #I
      B_SEL=1
      Y_SEL0=0
      Y_SEL1=0
      Y_SEL2=1             
      ops={"000":"10000" ,"001":"10010","010":"10011","011":"10001"}
      ALU_op=ops.get(fun3)
      if(arr[0]=='1'):
        binary_string = str(arr[0:12])
        imm = twos_comp(int(binary_string,2), len(binary_string))
      else:
        imm=int(str(arr[0:12]),2)
      rs1=int(str(arr[12:17]),2)
      rd=int(str(arr[20:25]),2)
      RA=Reg[rs1]
      B_SEL=1
      A_sel=0
      InA=RA
      res=-1
      rs2=int(str(arr[7:12]),2)

    elif(subArr=="0010011"):                 #I
      B_SEL=1
      Y_SEL0=0
      Y_SEL1=0
      Y_SEL2=1
      ops={"000":"01101" ,"110":"01111","111":"01110"}
      ALU_op=ops.get(fun3)
      if(arr[0]=='1'):
        binary_string = str(arr[0:12])
        imm = twos_comp(int(binary_string,2), len(binary_string))
      else:
        imm=int(str(arr[0:12]),2)
      rs1=int(str(arr[12:17]),2)
      rd=int(str(arr[20:25]),2)
      RA=Reg[rs1]
      B_SEL=1
      A_sel=0
      InA=RA
      res=-1
      rs2=int(str(arr[7:12]),2)

    elif(subArr=="1100111"):                 #I #jalr
      B_SEL=1
      Y_SEL0=0
      Y_SEL1=0
      Y_SEL2=1
      ALU_op="10100"
      if(arr[0]=='1'):
        binary_string = str(arr[0:12])
        imm = twos_comp(int(binary_string,2), len(binary_string))
      else:
        imm=int(str(arr[0:12]),2)
      rs1=int(str(arr[12:17]),2)
      rd=int(str(arr[20:25]),2)
      RA=Reg[rs1]
      B_SEL=1
      A_sel=0
      InA=RA
      res=-1
      rs2=int(str(arr[7:12]),2)
  

    elif(subArr=="0010111"):                 #auipc
      B_SEL=1
      Y_SEL0=0
      Y_SEL1=1
      Y_SEL2=0
      ALU_op="11101"
      rd=int(str(arr[20:25]),2)
      rs1=int(str(arr[12:17]),2)
      rs2=int(str(arr[7:12]),2)
      imm=int(str(arr[0:20])+"000000000000",2)
    
      RA=0
      RB=0
      A_sel=1
      InA=RA
      res=-1
                                                                #check
    
    elif(subArr=="0110111"):                  #lui
      B_SEL=1
      Y_SEL0=0
      Y_SEL1=1
      Y_SEL2=1
      ALU_op="11110"
      rs1=int(str(arr[12:17]),2)
      rs2=int(str(arr[7:12]),2)
            
      rd=int(str(arr[20:25]),2)
      imm=int(str(arr[0:20])+"000000000000",2)
      RA=0
      RB=0
      B_SEL=1
      A_sel=0
      InA=RA
      res=-1

    elif(subArr=="1101111"):                 #UJ
      B_SEL=0
      Y_SEL0=1
      Y_SEL1=0
      Y_SEL2=0
      ALU_op="11111"
      rd=int(str(arr[20:25]),2)
      rs1=int(str(arr[12:17]),2)
      rs2=int(str(arr[7:12]),2)

    
      
      #imm=int(str(arr[0])+str(arr[12:20])+str(arr[11])+str(arr[1:11]))+"0",2)
      binary_string = str((arr[0])+str(arr[12:20])+str(arr[11])+str(arr[1:11])+"0")
      if(arr[0]=='1'):
        imm = twos_comp(int(binary_string,2), len(binary_string))
      else:
        imm=int(binary_string,2)
      RA=0
      RB=0
      B_SEL=0
      A_sel=0
      InA=RA
      res=1


    elif(subArr=="0100011"):                 #S         #fun3 for sd 011 
      B_SEL=1
      Y_SEL0=1
      Y_SEL1=0
      Y_SEL2=1
      ops={"000":"10101" ,"001":"10111","010":"11000","011":"10110"}
      ALU_op=ops.get(fun3)
      rd=0
      rs1=int(str(arr[12:17]),2)
      rs2=int(str(arr[7:12]),2)
      imm=int(str(arr[0:7])+str(arr[20:25]),2)
      RA=Reg[rs1]
      RB=Reg[rs2]
      B_SEL=1
      A_sel=0
      InA=RA
      res=-1



    elif(subArr=="1100011"):                 #SB
      B_SEL=0
      Y_SEL0=1
      Y_SEL1=1
      Y_SEL2=0
      ops={"000":"11001" ,"001":"11010","100":"11100","101":"11011"}
      ALU_op=ops.get(fun3)
      rd=0
      rs1=int(str(arr[12:17]),2)
      rs2=int(str(arr[7:12]),2)
      imm=int(str(arr[0])+str(arr[24])+str(arr[1:7])+str(arr[20:24])+"0",2)
      RA=Reg[rs1]
      RB=Reg[rs2]
      A_sel=0                                   #check
      InA=RA
      if (ALU_op == "11001"):#beq
        if(RA==RB):          	
	        res=1
          
        else:        
          res=0
                                
      elif (ALU_op == "11010"):#bne
        if(RA!=RB):        	
	        res=1
          
        else:
          res=0
      elif (ALU_op == "11011"):#bge
        if(RA>=RB):
          res=1
          
	               
        else:
          res=0
      elif (ALU_op == "11100"):#blt
        if(RA<RB):
          res=1
                  
        else:
          res=0

    InA=RA

    

    

    
    
    return InA,B_SEL,RB,rd,imm,return_addr,ALU_op,subArr,fun3,Y_SEL0,rs1,rs2,Y_SEL1,Y_SEL2,res

#==========EXECUTE================

def execute(op,ra,rb,PC,RB):
  
  
  global RM,rz
  RM=0
  if (op == "00001"):  #add                           
      rz= ra+rb
      
   
     
  elif (op == "00010"):  #and            
      rz= ra&rb
     
  elif (op == "00011"): #or
      rz= ra|rb
    
  elif (op == "00100"): #sll
      rz= ra<<rb
   
  elif (op == "00101"): #slt
     if(ra<rb):
       rz= 1

     else:
       rz= 0
   
  elif (op == "00110"): #sra
     rc=ra>>31
     rd=1<<31
     if(rc==1):
       for i in range(int(str(rb),2)):
         ra=ra>>1
         ra=ra+rd
       rz=ra
  
     else:
       rz= ra>>rb                 #just
    
      
  elif (op == "00111"): #srl
      rz= ra>>rb
    
  elif (op == "01000"): #sub
      rz= ra-rb     
   
  elif (op == "01001"): #xor
      rz= ra^rb     
           
  elif (op == "01010"): #mul
      rz= ra*rb       
     
  elif (op == "01011"):  #div    
      rz= ra/rb      
     
  elif (op == "01100"): #rem
      rz= ra%rb            
  
  elif (op == "01101"): #addi
      rz= ra+rb
   
  elif (op == "01110"): #andi
      rz= ra&rb
  
  elif (op == "01111"): #ori
      rz= ra|rb
    
  elif (op == "10000"): # lb
      RM =RB
    
      rz= ra+rb
  elif (op == "10001"): #ld
      RM =RB
    
      rz= ra+rb
  elif (op == "10010"): #lh
      RM = RB
   
      rz= ra+rb
  elif (op == "10011"): #lw
      RM = RB
     
      rz= ra+rb

                    
  elif (op == "10101"): #sb
      RM = RB
      rz=ra+rb
  elif (op == "10110"): #sd
      RM = RB
      rz= ra+rb
  elif (op == "10111"): #sh
      RM = RB
      rz= ra+rb
  elif (op == "11000"): #sw
      RM = RB
      rz= ra+rb
  elif (op == "11001"):#beq
      
      if(ra==rb):      
        rz= ra+rb
        
      else:
        
        rz= ra+rb
                                
  elif (op == "11010"):#bne
      if(ra!=rb):      
        rz= ra+rb
        
      else:
        rz= ra+rb
  elif (op == "11011"):#bge
      if(ra>=rb):        
        rz= ra+rb
        
      else:
        rz= ra+rb
  elif (op == "11100"):#blt
      if(ra<rb):       
        rz= ra+rb
        
      else:
        rz= ra+rb
  elif (op == "11101"):#auipc
        rz= rb+PC-4
  elif (op == "11110"):#lui
      rz= ra+rb
  elif (op == "11111"):#jal
      rz=ra+rb
            
     
     
       
  return rz,RM,PC

#==============Memorycall===================
def checkKey(dict, key): 
    global c 
    if key in dict.keys(): 
          c=1 
    else: 
          c=0 
  
def memdata_store(n_byte,dec,addr):
  global data,c
  checkKey(data,addr)
  if(c==1):
                del data[addr]
  bin_data_0b=str(bin(dec))
  j=len(bin_data_0b)
  bin_data=bin_data_0b[2:j]
  j=j-2
  for k in range(0,8*n_byte-j):
    bin_data="0"+bin_data
  for i in range(0, n_byte):
      str_addr=addr+i
      dictn={str_addr:bin_data[8*(n_byte-i-1):8*(n_byte-i)]}
      data.update(dictn)


def memdata_load(n_byte,addr):
  global data
  str_data=""
  for i in range(0,n_byte):
   
    str_data=data[addr+i]+str_data
    out=int(str(str_data),2)
  return out


def datamem(bin_data_0b, addr):
  global data
  j=len(bin_data_0b)
  bin_data=bin_data_0b[2:j]
  j=j-2
  for k in range(0,8-j):
    bin_data="0"+bin_data
  dictn={addr:bin_data[0:8]}
  data.update(dictn)
  


def memcall(ALU_op,rz,rm):
                global ry
                if(ALU_op=='10000'):
                        ry=memdata_load(1,rz)
                elif(ALU_op=='10001'):
                        ry=memdata_load(8,rz)
                elif(ALU_op=='10010'):
                        ry=memdata_load(2,rz)
                elif(ALU_op=='10011'):
                        ry=memdata_load(4,rz)
                elif(ALU_op=='10101'):
                        ry=0
                        memdata_store(1,rm,rz)
                elif(ALU_op=='10110'):
                        ry=0
                        memdata_store(8,rm,rz)
                elif(ALU_op=='10111'):
                        ry=0
                        memdata_store(2,rm,rz)
                elif(ALU_op=='11000'):
                        ry=0
                        memdata_store(4,rm,rz)
                return ry


#================register update=============

def reg_update(Reg,rd,RY):
  global knob3
  if(subArr=="0110011" or subArr=="0000011" or subArr=="0010011" or subArr=="1100111" or subArr=="0010111" or subArr=="0110111" or subArr=="1101111"):
          Reg[rd]=RY
          Reg[0]=0
          if(knob3==1):
            print("UPDATED REGISTER FILE: ")
            print(Reg)
          return Reg

  else:
         Reg[0]=0
         if(knob3==1):
            print("UPDATED REGISTER FILE: ")
            print(Reg)
         return Reg

  






#==================start of program=============


#list2=["00000000011100000000000110010011","00000000100000000000001000010011","00000010010000011000001010110011","end"]


f= open("check (7).txt","r+")
list1=f.readlines()

list2=[]
for i in range(len(list1)):
  if(list1[i][0:4]=="0x0 "):
    n=i
    break
  else:
    n=0

if list1[0][0:10]=="0x10000000" :
  
  for l in range(n):    
      str1 = str(list1[l][2:10])
      str2 = str(list1[l][13:])
     
      n1 = int(str1,16) 
      n2 = int(str2,16) 
      n2 = bin(n2)
      datamem(n2,n1)
  for i in range(n,len(list1)): 
    for j in range(len(list1[i])):
        if(list1[i][j]==" "):
            j=j+1;
            a=j+10;
           
            str3=str(list1[i][j:])
           
            n3 = int(str3,16)

            n3 = bin(n3)
            n3 = str(n3[2:])
            list2.append(str(n3))
            break
else:
   
   for i in range(len(list1)): 
      for j in range(len(list1[i])):
          if(list1[i][j]==" "):
            j=j+1;
            str3=str(list1[i][j:])
            n3 = int(str3,16)
            n3 = bin(n3)
            n3 = str(n3[2:])
            list2.append(str(n3))
            break

for i in range(len(list2)):
    if(len(list2[i])!=32): 
         d=32-len(list2[i])
         for j in range(d):
            list2[i]="0"+str(list2[i])

list2.append("end")

n=len(list2)-2

#=============BTBtable=======================
l=len(list2)-1
pc=[]
t_add=[]
pred=[]
for i in range (l):
  Pc=i*4
  arr=list2[i]
  subarr=arr[25:]
  if(subarr=="1100011"):          #SB
    imm=int(str(arr[0])+str(arr[24])+str(arr[1:7])+str(arr[20:24])+"0",2)
    pc.append(Pc)
    t_add.append(Pc+imm)
    pred.append(1)
  elif(subarr=="1101111"):        #UJ-jal  
      binary_string = str((arr[0])+str(arr[12:20])+str(arr[11])+str(arr[1:11])+"0")
      if(arr[0]=='1'):
	      imm = twos_comp(int(binary_string,2), len(binary_string))
      else:
        imm=int(binary_string,2)
      
      pc.append(Pc)
      t_add.append(Pc+imm)
      pred.append(1)

      
      
#==============BTPcompare==================
def btb_compare(tPC,pc,t_add,pred):
  l=len(pc)
  if(l==0):
    return tPC+4,0
  for i in range (l):
      if(tPC==pc[i]):
        
        if(pred[i]==1):
         
          return t_add[i],1
        else:
          return tPC+4,1
  
  return tPC+4,0    

def btb_pred(tPC,pc,t_add,pred):
  l=len(pc)
  for i in range (l):
      if(tPC==pc[i]):
        
        return i,t_add[i]
      
      









if(knob1==0):
        stmt=1
        while(list2[int(PC/4)]!="end"):

                stmt=stmt+1
                arr=fetch(PC/4,list2)
                IR=arr
                print("IR CHANGED TO: "+ IR)
                print("CURRENT PC: "+str(PC))
                PC=PC+4
                return_addr=PC

                InA,B_SEL,RB,rd,imm,return_addr,ALU_op,subArr,fun3,Y_SEL=decode_op1(arr,Reg);



                #======================MUXB=======================
                if(B_SEL==0):
                  InB=RB
                else:
                  InB=imm








                RZ,RM,PC=execute1(ALU_op,InA,InB,PC,RB)
                ry=memcall(ALU_op,RZ,RM)
                 
                #====================MUX-Y======================

                if(Y_SEL[0]==0 and Y_SEL[1]==0 and Y_SEL[2]==0 ):         #for R type
                 RY=RZ
                elif(Y_SEL[0]==0 and Y_SEL[1]==0 and Y_SEL[2]==1):        #for I type
                 if(subArr=="0000011"):    #load
                   RY=ry
                                                                                #check
                 if(subArr=="0010011"):    #addi,ori,etc
                   RY=RZ
                    
                 if(subArr=="1100111"):    #jalr
                   RY=return_addr
                elif(Y_SEL[0]==0 and Y_SEL[1]==1 and Y_SEL[2]==0):        #for auipc
                 RY=RZ                                            
                elif(Y_SEL[0]==0 and Y_SEL[1]==1 and Y_SEL[2]==1):        #for lui
                 RY=RZ    
                elif(Y_SEL[0]==1 and Y_SEL[1]==0 and Y_SEL[2]==0):        #for UJ type
                 RY=return_addr
                elif(Y_SEL[0]==1 and Y_SEL[1]==0 and Y_SEL[2]==1):        #for S type
                 RY="null"
                elif(Y_SEL[0]==1 and Y_SEL[1]==1 and Y_SEL[2]==0):        #for SB type
                 RY="null"

                Reg=reg_update(Reg,rd,RY)

else:
                    while(True):
                      cycles=cycles+1
                      
                      if(fe==0 and de==0 and ex==0 and me==0 and mw==0):
                        pl.append(p)  
                                                                
                      if(fe==0): 
                        print("FETCH")  
                        inst_exe=inst_exe+1                                       
                        arr=fetch(pl[-1],list2)
                      if(arr=="end"):
                          fe=1
                          arr=0
                      if(fe==0):
                          IR=arr
                          
                          return_addr=(pl[-1]*4)+4

                          B1.append([IR,return_addr])
                          if(knob4==1):
                            print("B1 BUFFER ",B1[-1])
                            print("CYCLE NUMBER  ",p) 
                          print("IR CHANGED TO: "+ str(IR))
                          print("CURRENT PC: "+str(PC))
                          
                          PC,tr=btb_compare((pl[-1]*4),pc,t_add,pred)                         
                          if(tr==1):
                            print("1 bit predictor used:")
                            p=int(PC/4)-1
                              
                          
                      print("!!!!!!!!!!!B1")
                      print(B1)
                      if(fe!=0):
                        f1=f1+1
                        fe=fe+1
                      if(fe==3):
                        de=de+1
                      
                      
                      print(fe,de)
                      if(pl[-2]!="n"  and de==0):
                          print("DECODE") 
                          
                          print("B1[-(2-f1)][0]=",B1[-(2-f1)][0])                                        
                          InA,B_SEL,RB,rd,imm,return_addr,ALU_op,subArr,fun3,Y_SEL0,rs1,rs2,Y_SEL1,Y_SEL2,res=decode_op(B1[-(2-f1)][0],Reg)
                          ans=1

                          
                          if(subArr=="0110011" or subArr=="1100011" or subArr=="0100011"):
                            if(rs1!=0):
                              if(rs1==B2[-(1-f1)][-3] or rs2==B2[-(1-f1)][-3]):
                                st=2
                                data_haz=data_haz+1
                              elif(rs1==B2[-(2-f1)][-3] or rs2==B2[-(2-f1)][-3]):
                                st=1
                                data_haz=data_haz+1
                          else:
                            if(rs1!=0):
                              if(rs1==B2[-(1-f1)][-3]):
                               st=2
                               data_haz=data_haz+1
                              elif(rs1==B2[-(2-f1)][-3]):
                               st=1
                               data_haz=data_haz+1

                          if(st==2):
                            B1.pop()
                            B1.pop()
                            B1.append(["00000000000000000000000000010011",0])
                            B1.append(["00000000000000000000000000010011",0])
                            B2.append(['01101', 0, 0,0, 1, 0, 0, '0010011', 0, 0, 1])
                            print("UPDATED B1 & B2: ")
                           # print(B1,B2)
                            nof_stalls2=nof_stalls2+2
                            st=0
                            p=pl[-2]-1
                         #   print(p)
                            ans=0


                          elif(st==1):
                            B1.pop()
                            vari=B1[-1]
                            B1.pop()
                            B1.append(["00000000000000000000000000010011",0])
                            B1.append(vari)
                            B2.append(['01101', 0, 0,0, 1, 0, 0, '0010011', 0, 0, 1])
                            print("UPDATED B1 & B2: ")
                          #  print(B1,B2)
                            st=st-1
                            p=pl[-1]-1
                            print(p)
                            nof_stalls2=nof_stalls2+1
                            ans=0
                          elif(ALU_op=="10100"): #Jalr
                            nofcontrol_ins=nofcontrol_ins+1
                            nof_stalls1=nof_stalls1+1
                            PC=imm+InA
                            p=(PC/4)-1
                            x1=len(B1)
                            B1.pop(x1-1)
                            dummy="00000000000000000000000000010011"
                            B1.append([dummy,PC+4])
                            ans=1
                          elif(res!=-1):
                            nofcontrol_ins=nofcontrol_ins+1
                            pctemp=B1[-2][1]-4
                            print("pctemp=",pctemp)
                            tmp,addr=btb_pred(pctemp,pc,t_add,pred)
                            print(tmp)
                            if(pred[tmp]==res):
                              if(res==1):
                                no_of_conhaz=no_of_conhaz+1
                            
                            if(pred[tmp]!=res):
                              nof_stalls1=nof_stalls1+1
                              nofmis_predic=nofmis_predic+1
                              if(res==1):
                                no_of_conhaz=no_of_conhaz+1
                                pred[tmp]=1
                                PC=addr
                                p=(PC/4)-1
                              elif(res==0):
                                pred[tmp]=0
                                PC=pctemp+4
                                p=(PC/4)-1
                              x1=len(B1)
                              B1.pop(x1-1)
                              dummy="00000000000000000000000000010011"
                              B1.append([dummy,PC+4])
                          #    print("B1=",B1)
                              ans=1
                          if(ans==1):
                            #======================MUXB=======================
                              if(B_SEL==0): 
                                InB=RB
                              else:
                                InB=imm
                            # print("^^^^^^^^^^^^^^^^^^^^^")
                            # print(B1)
                            # print(InB)
                              print("ALU_op",ALU_op)    
                              B2.append([ALU_op,InA,InB,B1[-2][1],B_SEL,Y_SEL0,RB,subArr,rd,Y_SEL1,Y_SEL2])    #ADD ALU_op
                              if(knob4==1):
                                print("B1 BUFFER ",B1[-1])
                                print("CYCLE NUMBER  ",p)
                              print("RETURN ADD=",B1[-2][1])
                              print(B2)
                              
                      elif(de!=0):
                            d1=d1+1
                            de=de+1
                      if(de==3):
                        ex=ex+1

                      if(pl[-3]!="n" and ex==0):
                          print("EXECUTE") 
                          InA,B_SEL,RB,rd,imm,return_addr,ALU_op,subArr,fun3,Y_SEL0,rs1,rs2,Y_SEL1,Y_SEL2,res=decode_op(B1[-(2-f1)-1][0],Reg) # current
                          if -(2-f1)-2 in range(-len(B1), len(B1)):
                            
                            InA1,B_SEL1,RB1,rd1,imm1,return_addr1,ALU_op1,subArr1,fun31,Y_SEL01,rs11,rs21,Y_SEL11,Y_SEL21,res1=decode_op(B1[-(2-f1)-2][0],Reg) # just back 
                            
                            if((B2[-(2-d1)][5]==0 and B2[-(2-d1)][9]==0 and B2[-(2-d1)][10]==0) or (B2[-(2-d1)][5]==1 and B2[-(2-d1)][9]==1 and B2[-(2-d1)][10]==0) ):      # curr rtype
                              
                              if((rd1==rs1 or rd1==rs2)and(rd1!=0)):
                                if((rd1==rs1 )):
                                  B2[-(2-d1)][1] = B3[-(2-e1)+1][0]
                                  
                                if(rd1==rs2):
                                  B2[-(2-d1)][2] = B3[-(2-e1)+1][0]
                                  
                            else:
                              
                              
                              if((rd1==rs1 )and (rd1!=0)):
                                
                                B2[-(2-d1)][1] = B3[-(2-e1)+1][0]
                                
                             
        
                          if -(2-f1)-3 in range(-len(B1), len(B1)):
                            
                       
                            
                            
                            InA12,B_SEL12,RB12,rd112,imm12,return_addr12,ALU_op12,subArr12,fun312,Y_SEL012,rs112,rs212,Y_SEL112,Y_SEL212,res12=decode_op(B1[-(2-f1)-3][0],Reg) # just back back
                           
                            
                            if((B2[-(2-d1)][5]==0 and B2[-(2-d1)][9]==0 and B2[-(2-d1)][10]==0) or (B2[-(2-d1)][5]==1 and B2[-(2-d1)][9]==1 and B2[-(2-d1)][10]==0) ):      # rtype
                              
                              
                              if((rd112==rs1 or rd112==rs2)and(rd112!=0)):
                                
                                
                                
                                if((rd112==rs1 )):
                                  
                                  B2[-(2-d1)][1] = B3[-(2-e1)+2][0]
                                  
                                if(rd112==rs2):
                                  
                                  B2[-(2-d1)][2] = B3[-(2-e1)+2][0]
                                  
                            else:
                            
                              
                              if((rd112==rs1 )and (rd112!=0)):
                                
                                B2[-(2-d1)][1] = B3[-(2-e1)+2][0]
                                
                                
                                                              

                    #=============EXECUTE====================

                          print("B2[-(2-d1)]=",B2[-(2-d1)])
                          #print(B2[-2][1]+B2[-2][2])
                          RZ,RM,PC1=execute(B2[-(2-d1)][0],B2[-(2-d1)][1],B2[-(2-d1)][2],B2[-(2-d1)][3],B2[-(2-d1)][6]) 
                          inst_alu=inst_alu+1
                          print("RZ=",RZ)
                           
                          B3.append([RZ,RM,PC1])
                          if(knob4==1):
                            print("B1 BUFFER ",B1[-1])
                            print("CYCLE NUMBER  ",p)
                          
                          print("#####B3")
                          print(B3)    
                      elif(ex!=0):
                            e1=e1+1
                            ex=ex+1
                      if(ex==3):
                        me=me+1

                      if(pl[-4]!="n" and me==0):
                         
                          InA,B_SEL,RB,rd,imm,return_addr,ALU_op,subArr,fun3,Y_SEL0,rs1,rs2,Y_SEL1,Y_SEL2,res=decode_op(B1[f1-3-1][0],Reg) # current
                          
                          if f1-3-1-1 in range(-len(B1), len(B1)):
                            
                           
                            InA1,B_SEL1,RB1,rd1,imm1,return_addr1,ALU_op1,subArr1,fun31,Y_SEL01,rs11,rs21,Y_SEL11,Y_SEL21,res1=decode_op(B1[f1-3-1-1][0],Reg) # just back 
                            
                            if(B2[-(3-d1)][5]==1 and B2[-(3-d1)][9]==0 and B2[-(3-d1)][10]==1 ): 
                              
                              if(B2[-(3-d1)-1][5]==0 and B2[-(3-d1)-1][9]==0 and B2[-(3-d1)-1][10]==1 ):        #for I type
                                if(B2[-(3-d1)-1][7]=="0000011"):    #load
                                  

                                  if(rd1==rd):
                                    B3[-(2-e1)][1] = B4[-(2-m1)+1][1]
                                    
                            
                             
        
                          if f1-3-1-2 in range(-len(B1), len(B1)):
                            
                            
                            
                            InA12,B_SEL12,RB12,rd112,imm12,return_addr12,ALU_op12,subArr12,fun312,Y_SEL012,rs112,rs212,Y_SEL112,Y_SEL212,res12=decode_op(B1[f1-3-1-2][0],Reg) # just back back
                            
                            
                            if(B2[-(3-d1)][5]==1 and B2[-(3-d1)][9]==0 and B2[-(3-d1)][10]==1 ): 
                              
                              if(B2[-(3-d1)-2][5]==0 and B2[-(3-d1)-2][9]==0 and B2[-(3-d1)-2][10]==1 ):        #for I type
                                if(B2[-(3-d1)-2][7]=="0000011"):    #load
                                  

                                  if(rd112==rd):
                                    B3[-(2-e1)][1] = B4[-(2-m1)][1]
                                    
                            
                    #============MEMCALL==============
                          print("MEMCALL")                                         

                          ry=memcall(B2[-(3-d1)][0],B3[-(2-e1)][0],B3[-(2-e1)][1])

                            
                          #====================MUX-Y======================
                        
                          if(B2[-(3-d1)][5]==0 and B2[-(3-d1)][9]==0 and B2[-(3-d1)][10]==0 ):         #for R type
                            RY=B3[-(2-e1)][0]
                          elif(B2[-(3-d1)][5]==0 and B2[-(3-d1)][9]==0 and B2[-(3-d1)][10]==1 ):        #for I type
                            if(B2[-(3-d1)][7]=="0000011"):    #load
                              RY=ry
                                                                                            #check
                            if(B2[-(3-d1)][7]=="0010011"):    #addi,ori,etc
                              RY=B3[-(2-e1)][0]
                                
                            if(B2[-(3-d1)][7]=="1100111"):    #jalr
                              RY=B3[-(2-e1)][2]
                          elif(B2[-(3-d1)][5]==0 and B2[-(3-d1)][9]==1 and B2[-(3-d1)][10]==0 ):        #for auipc
                            RY=B3[-(2-e1)][0]                                            
                          elif(B2[-(3-d1)][5]==0 and B2[-(3-d1)][9]==1 and B2[-(3-d1)][10]==1 ):        #for lui
                            RY=B3[-(2-e1)][0]    
                          elif(B2[-(3-d1)][5]==1 and B2[-(3-d1)][9]==0 and B2[-(3-d1)][10]==0 ):        #for UJ type
                            RY=B3[-(2-e1)][2]
                          elif(B2[-(3-d1)][5]==1 and B2[-(3-d1)][9]==0 and B2[-(3-d1)][10]==1 ):        #for S type
                            RY="null"
                          elif(B2[-(3-d1)][5]==1 and B2[-(3-d1)][9]==1 and B2[-(3-d1)][10]==0 ):        #for SB type
                            RY="null"
                          
                            
                          
                          
                          B4.append([B2[-(3-d1)][8],RY,pl[-4]])
                          if(knob4==1):
                            print("B1 BUFFER ",B1[-1])
                            print("CYCLE NUMBER  ",p)
                          print("@@@@@DATA")
                          print(data)
                         
                          

                      elif(me!=0):
                          m1=m1+1
                          me=me+1

                      if(me==3):
                        mw=mw+1

                      if(pl[-5]!="n" and mw==0):

                    #=================WRITE BACK=============
                          print("WRITEBACK")                                         
                          print(-(2-m1))
                          print("rd=",B4[-(2-m1)][0],"RY=",B4[-(2-m1)][1])
                          Reg=reg_update(Reg,B4[-(2-m1)][0],B4[-(2-m1)][1])
                          count=count+1
                          print(Reg)
                          print("&&&B4")
                          print(B4)
                          B2[-1][1]=Reg[rs1]
                          if(B_SEL==0):
                             B2[-1][2]=Reg[rs2]
                          print("B2 after wb=",B2[-1])

                      elif(mw!=0):
                        mw=mw+1

                      if(mw==0):
                        p=p+1
                        p=int(p)
                      
                      #print(B2)
                      #print(B3)
                      #print(B4)
                      


                      if(mw!=0):
                        break








print("no. of control_instructions=",nofcontrol_ins)
print("no. of stalls=",nof_stalls)
print("no. of mis predictions=",nofmis_predic)
print("no. of branch hazards=",nof_conhaz)
print("TOTAL NUMBER OF CYCLES: " + str(cycles))
print("TOTAL NUMBER OF INSTRUCTIONS EXECUTED: " + str(inst_exe))
print("CPI: "+ str(cycles/inst_exe))
print("NUMBER OD DATA-TRANSFER INSTRUCTIONS EXECUTED: " + str(inst_sl))
print("TOTAL NUMBER OF ALU INSTRUCTIONS EXECUTED: " + str(inst_alu))
print("TOTAL NUMBER DATA HAZARDS: " + str(data_haz)) 
print("NUMBER OF STALLS DUE TO CONTROL HAZARDS:",nof_stalls1)  
print("NUMBER OF STALLS DUE TO DATA HAZARDS:",nof_stalls2)  
print("FINAL REGISTER FILE: ")
print(Reg)
print("FINAL DATA: ")
print(data)

from google.colab import files
uploaded = files.upload()